# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UpdateApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def applications_id_put(self, id, application, **kwargs):  # noqa: E501
        """Update an application.  # noqa: E501

        Update an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_put(id, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Application id (required)
        :param ApiApplication application: Application data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_id_put_with_http_info(id, application, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_id_put_with_http_info(id, application, **kwargs)  # noqa: E501
            return data

    def applications_id_put_with_http_info(self, id, application, **kwargs):  # noqa: E501
        """Update an application.  # noqa: E501

        Update an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_id_put_with_http_info(id, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Application id (required)
        :param ApiApplication application: Application data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'application']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `applications_id_put`")  # noqa: E501
        # verify the required parameter 'application' is set
        if self.api_client.client_side_validation and ('application' not in params or
                                                       params['application'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application` when calling `applications_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/applications/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def businessservices_id_put(self, id, business_service, **kwargs):  # noqa: E501
        """Update a business service.  # noqa: E501

        Update a business service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.businessservices_id_put(id, business_service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Business service ID (required)
        :param ApiBusinessService business_service: Business service data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.businessservices_id_put_with_http_info(id, business_service, **kwargs)  # noqa: E501
        else:
            (data) = self.businessservices_id_put_with_http_info(id, business_service, **kwargs)  # noqa: E501
            return data

    def businessservices_id_put_with_http_info(self, id, business_service, **kwargs):  # noqa: E501
        """Update a business service.  # noqa: E501

        Update a business service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.businessservices_id_put_with_http_info(id, business_service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Business service ID (required)
        :param ApiBusinessService business_service: Business service data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'business_service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method businessservices_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `businessservices_id_put`")  # noqa: E501
        # verify the required parameter 'business_service' is set
        if self.api_client.client_side_validation and ('business_service' not in params or
                                                       params['business_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `business_service` when calling `businessservices_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_service' in params:
            body_params = params['business_service']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/businessservices/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def identities_id_put(self, id, identity, **kwargs):  # noqa: E501
        """Update an identity.  # noqa: E501

        Update an identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identities_id_put(id, identity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identity ID (required)
        :param ApiIdentity identity: Identity data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.identities_id_put_with_http_info(id, identity, **kwargs)  # noqa: E501
        else:
            (data) = self.identities_id_put_with_http_info(id, identity, **kwargs)  # noqa: E501
            return data

    def identities_id_put_with_http_info(self, id, identity, **kwargs):  # noqa: E501
        """Update an identity.  # noqa: E501

        Update an identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identities_id_put_with_http_info(id, identity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identity ID (required)
        :param ApiIdentity identity: Identity data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'identity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method identities_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `identities_id_put`")  # noqa: E501
        # verify the required parameter 'identity' is set
        if self.api_client.client_side_validation and ('identity' not in params or
                                                       params['identity'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `identity` when calling `identities_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'identity' in params:
            body_params = params['identity']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/identities/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobfunctions_id_put(self, id, job_function, **kwargs):  # noqa: E501
        """Update a job function.  # noqa: E501

        Update a job function.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobfunctions_id_put(id, job_function, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Job Function ID (required)
        :param ApiJobFunction job_function: Job Function data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobfunctions_id_put_with_http_info(id, job_function, **kwargs)  # noqa: E501
        else:
            (data) = self.jobfunctions_id_put_with_http_info(id, job_function, **kwargs)  # noqa: E501
            return data

    def jobfunctions_id_put_with_http_info(self, id, job_function, **kwargs):  # noqa: E501
        """Update a job function.  # noqa: E501

        Update a job function.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobfunctions_id_put_with_http_info(id, job_function, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Job Function ID (required)
        :param ApiJobFunction job_function: Job Function data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_function']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobfunctions_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `jobfunctions_id_put`")  # noqa: E501
        # verify the required parameter 'job_function' is set
        if self.api_client.client_side_validation and ('job_function' not in params or
                                                       params['job_function'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_function` when calling `jobfunctions_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_function' in params:
            body_params = params['job_function']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/jobfunctions/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proxies_id_put(self, id, proxy, **kwargs):  # noqa: E501
        """Update an proxy.  # noqa: E501

        Update an proxy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proxies_id_put(id, proxy, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Proxy ID (required)
        :param ApiProxy proxy: Proxy data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proxies_id_put_with_http_info(id, proxy, **kwargs)  # noqa: E501
        else:
            (data) = self.proxies_id_put_with_http_info(id, proxy, **kwargs)  # noqa: E501
            return data

    def proxies_id_put_with_http_info(self, id, proxy, **kwargs):  # noqa: E501
        """Update an proxy.  # noqa: E501

        Update an proxy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proxies_id_put_with_http_info(id, proxy, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Proxy ID (required)
        :param ApiProxy proxy: Proxy data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'proxy']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proxies_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `proxies_id_put`")  # noqa: E501
        # verify the required parameter 'proxy' is set
        if self.api_client.client_side_validation and ('proxy' not in params or
                                                       params['proxy'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `proxy` when calling `proxies_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'proxy' in params:
            body_params = params['proxy']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/proxies/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reviews_id_put(self, id, review, **kwargs):  # noqa: E501
        """Update a review.  # noqa: E501

        Update a review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reviews_id_put(id, review, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Review ID (required)
        :param ApiReview review: Review data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reviews_id_put_with_http_info(id, review, **kwargs)  # noqa: E501
        else:
            (data) = self.reviews_id_put_with_http_info(id, review, **kwargs)  # noqa: E501
            return data

    def reviews_id_put_with_http_info(self, id, review, **kwargs):  # noqa: E501
        """Update a review.  # noqa: E501

        Update a review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reviews_id_put_with_http_info(id, review, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Review ID (required)
        :param ApiReview review: Review data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'review']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reviews_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `reviews_id_put`")  # noqa: E501
        # verify the required parameter 'review' is set
        if self.api_client.client_side_validation and ('review' not in params or
                                                       params['review'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `review` when calling `reviews_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'review' in params:
            body_params = params['review']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reviews/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_key_put(self, key, **kwargs):  # noqa: E501
        """Update a setting.  # noqa: E501

        Update a setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_key_put(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_key_put_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.settings_key_put_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def settings_key_put_with_http_info(self, key, **kwargs):  # noqa: E501
        """Update a setting.  # noqa: E501

        Update a setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_key_put_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_key_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if self.api_client.client_side_validation and ('key' not in params or
                                                       params['key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key` when calling `settings_key_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/settings/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stakeholdergroups_id_put(self, id, stakeholder_group, **kwargs):  # noqa: E501
        """Update a stakeholder group.  # noqa: E501

        Update a stakeholder group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stakeholdergroups_id_put(id, stakeholder_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Stakeholder Group ID (required)
        :param ApiStakeholderGroup stakeholder_group: Stakeholder Group data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stakeholdergroups_id_put_with_http_info(id, stakeholder_group, **kwargs)  # noqa: E501
        else:
            (data) = self.stakeholdergroups_id_put_with_http_info(id, stakeholder_group, **kwargs)  # noqa: E501
            return data

    def stakeholdergroups_id_put_with_http_info(self, id, stakeholder_group, **kwargs):  # noqa: E501
        """Update a stakeholder group.  # noqa: E501

        Update a stakeholder group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stakeholdergroups_id_put_with_http_info(id, stakeholder_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Stakeholder Group ID (required)
        :param ApiStakeholderGroup stakeholder_group: Stakeholder Group data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'stakeholder_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stakeholdergroups_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stakeholdergroups_id_put`")  # noqa: E501
        # verify the required parameter 'stakeholder_group' is set
        if self.api_client.client_side_validation and ('stakeholder_group' not in params or
                                                       params['stakeholder_group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stakeholder_group` when calling `stakeholdergroups_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stakeholder_group' in params:
            body_params = params['stakeholder_group']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stakeholdergroups/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stakeholders_id_put(self, id, stakeholder, **kwargs):  # noqa: E501
        """Update a stakeholder.  # noqa: E501

        Update a stakeholder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stakeholders_id_put(id, stakeholder, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Stakeholder ID (required)
        :param ApiStakeholder stakeholder: Stakeholder data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stakeholders_id_put_with_http_info(id, stakeholder, **kwargs)  # noqa: E501
        else:
            (data) = self.stakeholders_id_put_with_http_info(id, stakeholder, **kwargs)  # noqa: E501
            return data

    def stakeholders_id_put_with_http_info(self, id, stakeholder, **kwargs):  # noqa: E501
        """Update a stakeholder.  # noqa: E501

        Update a stakeholder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stakeholders_id_put_with_http_info(id, stakeholder, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Stakeholder ID (required)
        :param ApiStakeholder stakeholder: Stakeholder data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'stakeholder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stakeholders_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stakeholders_id_put`")  # noqa: E501
        # verify the required parameter 'stakeholder' is set
        if self.api_client.client_side_validation and ('stakeholder' not in params or
                                                       params['stakeholder'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stakeholder` when calling `stakeholders_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stakeholder' in params:
            body_params = params['stakeholder']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stakeholders/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tags_id_put(self, id, tag, **kwargs):  # noqa: E501
        """Update a tag.  # noqa: E501

        Update a tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_id_put(id, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Tag ID (required)
        :param ApiTag tag: Tag data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tags_id_put_with_http_info(id, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.tags_id_put_with_http_info(id, tag, **kwargs)  # noqa: E501
            return data

    def tags_id_put_with_http_info(self, id, tag, **kwargs):  # noqa: E501
        """Update a tag.  # noqa: E501

        Update a tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_id_put_with_http_info(id, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Tag ID (required)
        :param ApiTag tag: Tag data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tags_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `tags_id_put`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if self.api_client.client_side_validation and ('tag' not in params or
                                                       params['tag'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag` when calling `tags_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tag' in params:
            body_params = params['tag']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tags/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tagtypes_id_put(self, id, tag_type, **kwargs):  # noqa: E501
        """Update a tag type.  # noqa: E501

        Update a tag type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tagtypes_id_put(id, tag_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Tag Type ID (required)
        :param ApiTagType tag_type: Tag Type data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tagtypes_id_put_with_http_info(id, tag_type, **kwargs)  # noqa: E501
        else:
            (data) = self.tagtypes_id_put_with_http_info(id, tag_type, **kwargs)  # noqa: E501
            return data

    def tagtypes_id_put_with_http_info(self, id, tag_type, **kwargs):  # noqa: E501
        """Update a tag type.  # noqa: E501

        Update a tag type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tagtypes_id_put_with_http_info(id, tag_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Tag Type ID (required)
        :param ApiTagType tag_type: Tag Type data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tag_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tagtypes_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `tagtypes_id_put`")  # noqa: E501
        # verify the required parameter 'tag_type' is set
        if self.api_client.client_side_validation and ('tag_type' not in params or
                                                       params['tag_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag_type` when calling `tagtypes_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tag_type' in params:
            body_params = params['tag_type']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagtypes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def taskgroups_id_submit_put(self, id, **kwargs):  # noqa: E501
        """Submit a task group.  # noqa: E501

        Submit a task group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.taskgroups_id_submit_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: TaskGroup ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.taskgroups_id_submit_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.taskgroups_id_submit_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def taskgroups_id_submit_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Submit a task group.  # noqa: E501

        Submit a task group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.taskgroups_id_submit_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: TaskGroup ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method taskgroups_id_submit_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `taskgroups_id_submit_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/taskgroups/{id}/submit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_id_put(self, id, task, **kwargs):  # noqa: E501
        """Update a task group.  # noqa: E501

        Update a task group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_put(id, task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :param ApiTask task: Task data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_id_put_with_http_info(id, task, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_id_put_with_http_info(id, task, **kwargs)  # noqa: E501
            return data

    def tasks_id_put_with_http_info(self, id, task, **kwargs):  # noqa: E501
        """Update a task group.  # noqa: E501

        Update a task group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_put_with_http_info(id, task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :param ApiTask task: Task data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'task']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `tasks_id_put`")  # noqa: E501
        # verify the required parameter 'task' is set
        if self.api_client.client_side_validation and ('task' not in params or
                                                       params['task'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task` when calling `tasks_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task' in params:
            body_params = params['task']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_id_report_delete(self, id, **kwargs):  # noqa: E501
        """Delete a task report.  # noqa: E501

        Delete a task report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_report_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_id_report_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_id_report_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tasks_id_report_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a task report.  # noqa: E501

        Delete a task report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_report_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_id_report_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `tasks_id_report_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{id}/report', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_id_report_post(self, id, task, **kwargs):  # noqa: E501
        """Create a task report.  # noqa: E501

        Update a task report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_report_post(id, task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :param ApiTaskReport task: TaskReport data (required)
        :return: ApiTaskReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_id_report_post_with_http_info(id, task, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_id_report_post_with_http_info(id, task, **kwargs)  # noqa: E501
            return data

    def tasks_id_report_post_with_http_info(self, id, task, **kwargs):  # noqa: E501
        """Create a task report.  # noqa: E501

        Update a task report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_report_post_with_http_info(id, task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :param ApiTaskReport task: TaskReport data (required)
        :return: ApiTaskReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'task']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_id_report_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `tasks_id_report_post`")  # noqa: E501
        # verify the required parameter 'task' is set
        if self.api_client.client_side_validation and ('task' not in params or
                                                       params['task'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task` when calling `tasks_id_report_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task' in params:
            body_params = params['task']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{id}/report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiTaskReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_id_report_put(self, id, task, **kwargs):  # noqa: E501
        """Update a task report.  # noqa: E501

        Update a task report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_report_put(id, task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :param ApiTaskReport task: TaskReport data (required)
        :return: ApiTaskReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_id_report_put_with_http_info(id, task, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_id_report_put_with_http_info(id, task, **kwargs)  # noqa: E501
            return data

    def tasks_id_report_put_with_http_info(self, id, task, **kwargs):  # noqa: E501
        """Update a task report.  # noqa: E501

        Update a task report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_report_put_with_http_info(id, task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :param ApiTaskReport task: TaskReport data (required)
        :return: ApiTaskReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'task']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_id_report_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `tasks_id_report_put`")  # noqa: E501
        # verify the required parameter 'task' is set
        if self.api_client.client_side_validation and ('task' not in params or
                                                       params['task'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task` when calling `tasks_id_report_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task' in params:
            body_params = params['task']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{id}/report', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiTaskReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_id_submit_put(self, id, **kwargs):  # noqa: E501
        """Submit a task.  # noqa: E501

        Submit a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_submit_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_id_submit_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_id_submit_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tasks_id_submit_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Submit a task.  # noqa: E501

        Submit a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_id_submit_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Task ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_id_submit_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `tasks_id_submit_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tasks/{id}/submit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
