# coding: utf-8

"""
    tackle2.0 api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CreateApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def applications_post(self, application, **kwargs):  # noqa: E501
        """Create an application.  # noqa: E501

        Create an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_post(application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiApplication application: Application data (required)
        :return: ApiApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_post_with_http_info(application, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_post_with_http_info(application, **kwargs)  # noqa: E501
            return data

    def applications_post_with_http_info(self, application, **kwargs):  # noqa: E501
        """Create an application.  # noqa: E501

        Create an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_post_with_http_info(application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiApplication application: Application data (required)
        :return: ApiApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if self.api_client.client_side_validation and ('application' not in params or
                                                       params['application'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application` when calling `applications_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/applications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiApplication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def businessservices_post(self, business_service, **kwargs):  # noqa: E501
        """Create a business service.  # noqa: E501

        Create a business service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.businessservices_post(business_service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiBusinessService business_service: Business service data (required)
        :return: ApiBusinessService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.businessservices_post_with_http_info(business_service, **kwargs)  # noqa: E501
        else:
            (data) = self.businessservices_post_with_http_info(business_service, **kwargs)  # noqa: E501
            return data

    def businessservices_post_with_http_info(self, business_service, **kwargs):  # noqa: E501
        """Create a business service.  # noqa: E501

        Create a business service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.businessservices_post_with_http_info(business_service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiBusinessService business_service: Business service data (required)
        :return: ApiBusinessService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method businessservices_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'business_service' is set
        if self.api_client.client_side_validation and ('business_service' not in params or
                                                       params['business_service'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `business_service` when calling `businessservices_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'business_service' in params:
            body_params = params['business_service']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/businessservices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiBusinessService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dependencies_post(self, applications_dependency, **kwargs):  # noqa: E501
        """Create a dependency.  # noqa: E501

        Create a dependency.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dependencies_post(applications_dependency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDependency applications_dependency: Dependency data (required)
        :return: ApiDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dependencies_post_with_http_info(applications_dependency, **kwargs)  # noqa: E501
        else:
            (data) = self.dependencies_post_with_http_info(applications_dependency, **kwargs)  # noqa: E501
            return data

    def dependencies_post_with_http_info(self, applications_dependency, **kwargs):  # noqa: E501
        """Create a dependency.  # noqa: E501

        Create a dependency.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dependencies_post_with_http_info(applications_dependency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDependency applications_dependency: Dependency data (required)
        :return: ApiDependency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applications_dependency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dependencies_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applications_dependency' is set
        if self.api_client.client_side_validation and ('applications_dependency' not in params or
                                                       params['applications_dependency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applications_dependency` when calling `dependencies_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'applications_dependency' in params:
            body_params = params['applications_dependency']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dependencies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiDependency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def identities_post(self, identity, **kwargs):  # noqa: E501
        """Create an identity.  # noqa: E501

        Create an identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identities_post(identity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiIdentity identity: Identity data (required)
        :return: ApiIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.identities_post_with_http_info(identity, **kwargs)  # noqa: E501
        else:
            (data) = self.identities_post_with_http_info(identity, **kwargs)  # noqa: E501
            return data

    def identities_post_with_http_info(self, identity, **kwargs):  # noqa: E501
        """Create an identity.  # noqa: E501

        Create an identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identities_post_with_http_info(identity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiIdentity identity: Identity data (required)
        :return: ApiIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method identities_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identity' is set
        if self.api_client.client_side_validation and ('identity' not in params or
                                                       params['identity'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `identity` when calling `identities_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'identity' in params:
            body_params = params['identity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/identities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiIdentity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobfunctions_post(self, job_function, **kwargs):  # noqa: E501
        """Create a job function.  # noqa: E501

        Create a job function.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobfunctions_post(job_function, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiJobFunction job_function: Job Function data (required)
        :return: ApiJobFunction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobfunctions_post_with_http_info(job_function, **kwargs)  # noqa: E501
        else:
            (data) = self.jobfunctions_post_with_http_info(job_function, **kwargs)  # noqa: E501
            return data

    def jobfunctions_post_with_http_info(self, job_function, **kwargs):  # noqa: E501
        """Create a job function.  # noqa: E501

        Create a job function.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobfunctions_post_with_http_info(job_function, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiJobFunction job_function: Job Function data (required)
        :return: ApiJobFunction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_function']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobfunctions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_function' is set
        if self.api_client.client_side_validation and ('job_function' not in params or
                                                       params['job_function'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_function` when calling `jobfunctions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'job_function' in params:
            body_params = params['job_function']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/jobfunctions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiJobFunction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proxies_post(self, proxy, **kwargs):  # noqa: E501
        """Create an proxy.  # noqa: E501

        Create an proxy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proxies_post(proxy, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiProxy proxy: Proxy data (required)
        :return: ApiProxy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proxies_post_with_http_info(proxy, **kwargs)  # noqa: E501
        else:
            (data) = self.proxies_post_with_http_info(proxy, **kwargs)  # noqa: E501
            return data

    def proxies_post_with_http_info(self, proxy, **kwargs):  # noqa: E501
        """Create an proxy.  # noqa: E501

        Create an proxy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proxies_post_with_http_info(proxy, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiProxy proxy: Proxy data (required)
        :return: ApiProxy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['proxy']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proxies_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'proxy' is set
        if self.api_client.client_side_validation and ('proxy' not in params or
                                                       params['proxy'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `proxy` when calling `proxies_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'proxy' in params:
            body_params = params['proxy']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/proxies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiProxy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reviews_post(self, review, **kwargs):  # noqa: E501
        """Create a review.  # noqa: E501

        Create a review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reviews_post(review, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiReview review: Review data (required)
        :return: ApiReview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reviews_post_with_http_info(review, **kwargs)  # noqa: E501
        else:
            (data) = self.reviews_post_with_http_info(review, **kwargs)  # noqa: E501
            return data

    def reviews_post_with_http_info(self, review, **kwargs):  # noqa: E501
        """Create a review.  # noqa: E501

        Create a review.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reviews_post_with_http_info(review, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiReview review: Review data (required)
        :return: ApiReview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['review']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reviews_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'review' is set
        if self.api_client.client_side_validation and ('review' not in params or
                                                       params['review'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `review` when calling `reviews_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'review' in params:
            body_params = params['review']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reviews', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiReview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_post(self, setting, **kwargs):  # noqa: E501
        """Create a setting.  # noqa: E501

        Create a setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_post(setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiSetting setting: Setting data (required)
        :return: ApiSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_post_with_http_info(setting, **kwargs)  # noqa: E501
        else:
            (data) = self.settings_post_with_http_info(setting, **kwargs)  # noqa: E501
            return data

    def settings_post_with_http_info(self, setting, **kwargs):  # noqa: E501
        """Create a setting.  # noqa: E501

        Create a setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_post_with_http_info(setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiSetting setting: Setting data (required)
        :return: ApiSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting' is set
        if self.api_client.client_side_validation and ('setting' not in params or
                                                       params['setting'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `setting` when calling `settings_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'setting' in params:
            body_params = params['setting']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stakeholdergroups_post(self, stakeholder_group, **kwargs):  # noqa: E501
        """Create a stakeholder group.  # noqa: E501

        Create a stakeholder group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stakeholdergroups_post(stakeholder_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiStakeholderGroup stakeholder_group: Stakeholder Group data (required)
        :return: ApiStakeholderGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stakeholdergroups_post_with_http_info(stakeholder_group, **kwargs)  # noqa: E501
        else:
            (data) = self.stakeholdergroups_post_with_http_info(stakeholder_group, **kwargs)  # noqa: E501
            return data

    def stakeholdergroups_post_with_http_info(self, stakeholder_group, **kwargs):  # noqa: E501
        """Create a stakeholder group.  # noqa: E501

        Create a stakeholder group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stakeholdergroups_post_with_http_info(stakeholder_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiStakeholderGroup stakeholder_group: Stakeholder Group data (required)
        :return: ApiStakeholderGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stakeholder_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stakeholdergroups_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stakeholder_group' is set
        if self.api_client.client_side_validation and ('stakeholder_group' not in params or
                                                       params['stakeholder_group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stakeholder_group` when calling `stakeholdergroups_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stakeholder_group' in params:
            body_params = params['stakeholder_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/stakeholdergroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiStakeholderGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stakeholders_post(self, stakeholder, **kwargs):  # noqa: E501
        """Create a stakeholder.  # noqa: E501

        Create a stakeholder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stakeholders_post(stakeholder, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiStakeholder stakeholder: Stakeholder data (required)
        :return: ApiStakeholder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stakeholders_post_with_http_info(stakeholder, **kwargs)  # noqa: E501
        else:
            (data) = self.stakeholders_post_with_http_info(stakeholder, **kwargs)  # noqa: E501
            return data

    def stakeholders_post_with_http_info(self, stakeholder, **kwargs):  # noqa: E501
        """Create a stakeholder.  # noqa: E501

        Create a stakeholder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stakeholders_post_with_http_info(stakeholder, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiStakeholder stakeholder: Stakeholder data (required)
        :return: ApiStakeholder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stakeholder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stakeholders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stakeholder' is set
        if self.api_client.client_side_validation and ('stakeholder' not in params or
                                                       params['stakeholder'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stakeholder` when calling `stakeholders_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stakeholder' in params:
            body_params = params['stakeholder']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/stakeholders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiStakeholder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tags_post(self, tag, **kwargs):  # noqa: E501
        """Create a tag.  # noqa: E501

        Create a tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_post(tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiTag tag: Tag data (required)
        :return: ApiTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tags_post_with_http_info(tag, **kwargs)  # noqa: E501
        else:
            (data) = self.tags_post_with_http_info(tag, **kwargs)  # noqa: E501
            return data

    def tags_post_with_http_info(self, tag, **kwargs):  # noqa: E501
        """Create a tag.  # noqa: E501

        Create a tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_post_with_http_info(tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiTag tag: Tag data (required)
        :return: ApiTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tags_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tag' is set
        if self.api_client.client_side_validation and ('tag' not in params or
                                                       params['tag'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag` when calling `tags_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tag' in params:
            body_params = params['tag']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tagtypes_post(self, tag_type, **kwargs):  # noqa: E501
        """Create a tag type.  # noqa: E501

        Create a tag type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tagtypes_post(tag_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiTagType tag_type: Tag Type data (required)
        :return: ApiTagType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tagtypes_post_with_http_info(tag_type, **kwargs)  # noqa: E501
        else:
            (data) = self.tagtypes_post_with_http_info(tag_type, **kwargs)  # noqa: E501
            return data

    def tagtypes_post_with_http_info(self, tag_type, **kwargs):  # noqa: E501
        """Create a tag type.  # noqa: E501

        Create a tag type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tagtypes_post_with_http_info(tag_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiTagType tag_type: Tag Type data (required)
        :return: ApiTagType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tagtypes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tag_type' is set
        if self.api_client.client_side_validation and ('tag_type' not in params or
                                                       params['tag_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag_type` when calling `tagtypes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tag_type' in params:
            body_params = params['tag_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tagtypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiTagType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def taskgroups_post(self, taskgroup, **kwargs):  # noqa: E501
        """Create a task group.  # noqa: E501

        Create a task group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.taskgroups_post(taskgroup, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiTaskGroup taskgroup: TaskGroup data (required)
        :return: ApiTaskGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.taskgroups_post_with_http_info(taskgroup, **kwargs)  # noqa: E501
        else:
            (data) = self.taskgroups_post_with_http_info(taskgroup, **kwargs)  # noqa: E501
            return data

    def taskgroups_post_with_http_info(self, taskgroup, **kwargs):  # noqa: E501
        """Create a task group.  # noqa: E501

        Create a task group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.taskgroups_post_with_http_info(taskgroup, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiTaskGroup taskgroup: TaskGroup data (required)
        :return: ApiTaskGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taskgroup']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method taskgroups_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taskgroup' is set
        if self.api_client.client_side_validation and ('taskgroup' not in params or
                                                       params['taskgroup'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `taskgroup` when calling `taskgroups_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'taskgroup' in params:
            body_params = params['taskgroup']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/taskgroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiTaskGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_post(self, task, **kwargs):  # noqa: E501
        """Create a task.  # noqa: E501

        Create a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_post(task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiTask task: Task data (required)
        :return: ApiTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_post_with_http_info(task, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_post_with_http_info(task, **kwargs)  # noqa: E501
            return data

    def tasks_post_with_http_info(self, task, **kwargs):  # noqa: E501
        """Create a task.  # noqa: E501

        Create a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_post_with_http_info(task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiTask task: Task data (required)
        :return: ApiTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task' is set
        if self.api_client.client_side_validation and ('task' not in params or
                                                       params['task'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task` when calling `tasks_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task' in params:
            body_params = params['task']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
