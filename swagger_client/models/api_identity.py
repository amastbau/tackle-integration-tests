# coding: utf-8

"""
    tackle2.0 api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ApiIdentity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'str',
        'create_user': 'str',
        'description': 'str',
        'encrypted': 'str',
        'id': 'int',
        'key': 'str',
        'kind': 'str',
        'name': 'str',
        'password': 'str',
        'settings': 'str',
        'update_user': 'str',
        'user': 'str'
    }

    attribute_map = {
        'create_time': 'createTime',
        'create_user': 'createUser',
        'description': 'description',
        'encrypted': 'encrypted',
        'id': 'id',
        'key': 'key',
        'kind': 'kind',
        'name': 'name',
        'password': 'password',
        'settings': 'settings',
        'update_user': 'updateUser',
        'user': 'user'
    }

    def __init__(self, create_time=None, create_user=None, description=None, encrypted=None, id=None, key=None, kind=None, name=None, password=None, settings=None, update_user=None, user=None, _configuration=None):  # noqa: E501
        """ApiIdentity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_time = None
        self._create_user = None
        self._description = None
        self._encrypted = None
        self._id = None
        self._key = None
        self._kind = None
        self._name = None
        self._password = None
        self._settings = None
        self._update_user = None
        self._user = None
        self.discriminator = None

        if create_time is not None:
            self.create_time = create_time
        if create_user is not None:
            self.create_user = create_user
        if description is not None:
            self.description = description
        if encrypted is not None:
            self.encrypted = encrypted
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        self.kind = kind
        self.name = name
        if password is not None:
            self.password = password
        if settings is not None:
            self.settings = settings
        if update_user is not None:
            self.update_user = update_user
        if user is not None:
            self.user = user

    @property
    def create_time(self):
        """Gets the create_time of this ApiIdentity.  # noqa: E501


        :return: The create_time of this ApiIdentity.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApiIdentity.


        :param create_time: The create_time of this ApiIdentity.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def create_user(self):
        """Gets the create_user of this ApiIdentity.  # noqa: E501


        :return: The create_user of this ApiIdentity.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this ApiIdentity.


        :param create_user: The create_user of this ApiIdentity.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def description(self):
        """Gets the description of this ApiIdentity.  # noqa: E501


        :return: The description of this ApiIdentity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiIdentity.


        :param description: The description of this ApiIdentity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def encrypted(self):
        """Gets the encrypted of this ApiIdentity.  # noqa: E501


        :return: The encrypted of this ApiIdentity.  # noqa: E501
        :rtype: str
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this ApiIdentity.


        :param encrypted: The encrypted of this ApiIdentity.  # noqa: E501
        :type: str
        """

        self._encrypted = encrypted

    @property
    def id(self):
        """Gets the id of this ApiIdentity.  # noqa: E501


        :return: The id of this ApiIdentity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiIdentity.


        :param id: The id of this ApiIdentity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this ApiIdentity.  # noqa: E501


        :return: The key of this ApiIdentity.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ApiIdentity.


        :param key: The key of this ApiIdentity.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def kind(self):
        """Gets the kind of this ApiIdentity.  # noqa: E501


        :return: The kind of this ApiIdentity.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApiIdentity.


        :param kind: The kind of this ApiIdentity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this ApiIdentity.  # noqa: E501


        :return: The name of this ApiIdentity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiIdentity.


        :param name: The name of this ApiIdentity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def password(self):
        """Gets the password of this ApiIdentity.  # noqa: E501


        :return: The password of this ApiIdentity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApiIdentity.


        :param password: The password of this ApiIdentity.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def settings(self):
        """Gets the settings of this ApiIdentity.  # noqa: E501


        :return: The settings of this ApiIdentity.  # noqa: E501
        :rtype: str
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ApiIdentity.


        :param settings: The settings of this ApiIdentity.  # noqa: E501
        :type: str
        """

        self._settings = settings

    @property
    def update_user(self):
        """Gets the update_user of this ApiIdentity.  # noqa: E501


        :return: The update_user of this ApiIdentity.  # noqa: E501
        :rtype: str
        """
        return self._update_user

    @update_user.setter
    def update_user(self, update_user):
        """Sets the update_user of this ApiIdentity.


        :param update_user: The update_user of this ApiIdentity.  # noqa: E501
        :type: str
        """

        self._update_user = update_user

    @property
    def user(self):
        """Gets the user of this ApiIdentity.  # noqa: E501


        :return: The user of this ApiIdentity.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ApiIdentity.


        :param user: The user of this ApiIdentity.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiIdentity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiIdentity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiIdentity):
            return True

        return self.to_dict() != other.to_dict()
